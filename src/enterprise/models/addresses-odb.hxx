// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ADDRESSES_ODB_HXX
#define ADDRESSES_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "enterprise/models/addresses.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // eAddresses
  //
  template <>
  struct class_traits< ::eAddresses >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eAddresses >
  {
    public:
    typedef ::eAddresses object_type;
    typedef ::eAddresses* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // eAddresses
  //
  template <typename A>
  struct query_columns< ::eAddresses, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    id_type_;

    static const id_type_ id;

    // script_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    script_id_type_;

    static const script_id_type_ script_id;

    // address
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    address_type_;

    static const address_type_ address;

    // source_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    source_type_type_;

    static const source_type_type_ source_type;

    // hex
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    hex_type_;

    static const hex_type_ hex;

    // version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    version_type_;

    static const version_type_ version;

    // length
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    length_type_;

    static const length_type_ length;

    // program
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    program_type_;

    static const program_type_ program;
  };

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::id_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::script_id_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  script_id (A::table_name, "\"script_id\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::address_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  address (A::table_name, "\"address\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::source_type_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  source_type (A::table_name, "\"source_type\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::hex_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  hex (A::table_name, "\"hex\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::version_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::length_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  length (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::eAddresses, id_pgsql, A >::program_type_
  query_columns< ::eAddresses, id_pgsql, A >::
  program (A::table_name, "\"program\"", 0);

  template <typename A>
  struct pointer_query_columns< ::eAddresses, id_pgsql, A >:
    query_columns< ::eAddresses, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eAddresses, id_pgsql >:
    public access::object_traits< ::eAddresses >
  {
    public:
    struct id_image_type
    {
      int id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      bool id_null;

      // script_id
      //
      details::buffer script_id_value;
      std::size_t script_id_size;
      bool script_id_null;

      // address
      //
      details::buffer address_value;
      std::size_t address_size;
      bool address_null;

      // source_type
      //
      details::buffer source_type_value;
      std::size_t source_type_size;
      bool source_type_null;

      // hex
      //
      details::buffer hex_value;
      std::size_t hex_size;
      bool hex_null;

      // version
      //
      int version_value;
      bool version_null;

      // length
      //
      int length_value;
      bool length_null;

      // program
      //
      details::buffer program_value;
      std::size_t program_size;
      bool program_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eAddresses, id_common >:
    public access::object_traits_impl< ::eAddresses, id_pgsql >
  {
  };

  // eAddresses
  //
}

#include "enterprise/models/addresses-odb.ixx"

#include <odb/post.hxx>

#endif // ADDRESSES_ODB_HXX
