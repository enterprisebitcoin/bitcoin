// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef TRANSACTIONS_ODB_HXX
#define TRANSACTIONS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "enterprise/models/transactions.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // eTransactions
  //
  template <>
  struct class_traits< ::eTransactions >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eTransactions >
  {
    public:
    typedef ::eTransactions object_type;
    typedef ::eTransactions* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // eTransactions
  //
  template <typename A>
  struct query_columns< ::eTransactions, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    id_type_;

    static const id_type_ id;

    // block_hash
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    block_hash_type_;

    static const block_hash_type_ block_hash;

    // index
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    index_type_;

    static const index_type_ index;

    // size
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    size_type_;

    static const size_type_ size;

    // vsize
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    vsize_type_;

    static const vsize_type_ vsize;

    // weight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    weight_type_;

    static const weight_type_ weight;

    // inputs_count
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    inputs_count_type_;

    static const inputs_count_type_ inputs_count;

    // outputs_count
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    outputs_count_type_;

    static const outputs_count_type_ outputs_count;

    // lock_time
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int32_t,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    lock_time_type_;

    static const lock_time_type_ lock_time;

    // version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int32_t,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    version_type_;

    static const version_type_ version;

    // hash
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    hash_type_;

    static const hash_type_ hash;

    // witness_hash
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    witness_hash_type_;

    static const witness_hash_type_ witness_hash;

    // is_coinbase
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    is_coinbase_type_;

    static const is_coinbase_type_ is_coinbase;

    // has_witness
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    has_witness_type_;

    static const has_witness_type_ has_witness;

    // is_segwit_out_spend
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    is_segwit_out_spend_type_;

    static const is_segwit_out_spend_type_ is_segwit_out_spend;

    // total_output_value
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    total_output_value_type_;

    static const total_output_value_type_ total_output_value;

    // total_input_value
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    total_input_value_type_;

    static const total_input_value_type_ total_input_value;

    // fees
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    fees_type_;

    static const fees_type_ fees;

    // fee_per_byte
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    fee_per_byte_type_;

    static const fee_per_byte_type_ fee_per_byte;

    // fee_per_vbyte
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    fee_per_vbyte_type_;

    static const fee_per_vbyte_type_ fee_per_vbyte;

    // fee_per_weight_unit
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    fee_per_weight_unit_type_;

    static const fee_per_weight_unit_type_ fee_per_weight_unit;
  };

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::id_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::block_hash_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  block_hash (A::table_name, "\"block_hash\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::index_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::size_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  size (A::table_name, "\"size\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::vsize_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  vsize (A::table_name, "\"vsize\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::weight_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  weight (A::table_name, "\"weight\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::inputs_count_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  inputs_count (A::table_name, "\"inputs_count\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::outputs_count_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  outputs_count (A::table_name, "\"outputs_count\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::lock_time_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  lock_time (A::table_name, "\"lock_time\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::version_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::hash_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::witness_hash_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  witness_hash (A::table_name, "\"witness_hash\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::is_coinbase_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  is_coinbase (A::table_name, "\"is_coinbase\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::has_witness_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  has_witness (A::table_name, "\"has_witness\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::is_segwit_out_spend_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  is_segwit_out_spend (A::table_name, "\"is_segwit_out_spend\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::total_output_value_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  total_output_value (A::table_name, "\"total_output_value\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::total_input_value_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  total_input_value (A::table_name, "\"total_input_value\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::fees_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  fees (A::table_name, "\"fees\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::fee_per_byte_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  fee_per_byte (A::table_name, "\"fee_per_byte\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::fee_per_vbyte_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  fee_per_vbyte (A::table_name, "\"fee_per_vbyte\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::fee_per_weight_unit_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  fee_per_weight_unit (A::table_name, "\"fee_per_weight_unit\"", 0);

  template <typename A>
  struct pointer_query_columns< ::eTransactions, id_pgsql, A >:
    query_columns< ::eTransactions, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eTransactions, id_pgsql >:
    public access::object_traits< ::eTransactions >
  {
    public:
    struct id_image_type
    {
      int id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      bool id_null;

      // block_hash
      //
      details::buffer block_hash_value;
      std::size_t block_hash_size;
      bool block_hash_null;

      // index
      //
      int index_value;
      bool index_null;

      // size
      //
      int size_value;
      bool size_null;

      // vsize
      //
      int vsize_value;
      bool vsize_null;

      // weight
      //
      int weight_value;
      bool weight_null;

      // inputs_count
      //
      int inputs_count_value;
      bool inputs_count_null;

      // outputs_count
      //
      int outputs_count_value;
      bool outputs_count_null;

      // lock_time
      //
      int lock_time_value;
      bool lock_time_null;

      // version
      //
      int version_value;
      bool version_null;

      // hash
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // witness_hash
      //
      details::buffer witness_hash_value;
      std::size_t witness_hash_size;
      bool witness_hash_null;

      // is_coinbase
      //
      bool is_coinbase_value;
      bool is_coinbase_null;

      // has_witness
      //
      bool has_witness_value;
      bool has_witness_null;

      // is_segwit_out_spend
      //
      bool is_segwit_out_spend_value;
      bool is_segwit_out_spend_null;

      // total_output_value
      //
      long long total_output_value_value;
      bool total_output_value_null;

      // total_input_value
      //
      long long total_input_value_value;
      bool total_input_value_null;

      // fees
      //
      long long fees_value;
      bool fees_null;

      // fee_per_byte
      //
      float fee_per_byte_value;
      bool fee_per_byte_null;

      // fee_per_vbyte
      //
      float fee_per_vbyte_value;
      bool fee_per_vbyte_null;

      // fee_per_weight_unit
      //
      float fee_per_weight_unit_value;
      bool fee_per_weight_unit_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 21UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eTransactions, id_common >:
    public access::object_traits_impl< ::eTransactions, id_pgsql >
  {
  };

  // eTransactions
  //
}

#include "enterprise/models/transactions-odb.ixx"

#include <odb/post.hxx>

#endif // TRANSACTIONS_ODB_HXX
