// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef TRANSACTIONS_ODB_HXX
#define TRANSACTIONS_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <odb/boost/uuid/pgsql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "wallet/enterprise/models/transactions.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // eTransactions
  //
  template <>
  struct class_traits< ::eTransactions >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eTransactions >
  {
    public:
    typedef ::eTransactions object_type;
    typedef ::eTransactions* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // eTransactions
  //
  template <typename A>
  struct query_columns< ::eTransactions, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    id_type_;

    static const id_type_ id;

    // block_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    block_id_type_;

    static const block_id_type_ block_id;

    // total_size
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    total_size_type_;

    static const total_size_type_ total_size;

    // inputs_count
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    inputs_count_type_;

    static const inputs_count_type_ inputs_count;

    // outputs_count
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    outputs_count_type_;

    static const outputs_count_type_ outputs_count;

    // value_out
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    value_out_type_;

    static const value_out_type_ value_out;

    // n_lock_time
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int32_t,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    n_lock_time_type_;

    static const n_lock_time_type_ n_lock_time;

    // n_version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::int32_t,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    n_version_type_;

    static const n_version_type_ n_version;

    // hash
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    hash_type_;

    static const hash_type_ hash;

    // witness_hash
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    witness_hash_type_;

    static const witness_hash_type_ witness_hash;

    // is_coinbase
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    is_coinbase_type_;

    static const is_coinbase_type_ is_coinbase;

    // has_witness
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    has_witness_type_;

    static const has_witness_type_ has_witness;
  };

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::id_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::block_id_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  block_id (A::table_name, "\"block_id\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::total_size_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  total_size (A::table_name, "\"total_size\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::inputs_count_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  inputs_count (A::table_name, "\"inputs_count\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::outputs_count_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  outputs_count (A::table_name, "\"outputs_count\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::value_out_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  value_out (A::table_name, "\"value_out\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::n_lock_time_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  n_lock_time (A::table_name, "\"n_lock_time\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::n_version_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  n_version (A::table_name, "\"n_version\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::hash_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::witness_hash_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  witness_hash (A::table_name, "\"witness_hash\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::is_coinbase_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  is_coinbase (A::table_name, "\"is_coinbase\"", 0);

  template <typename A>
  const typename query_columns< ::eTransactions, id_pgsql, A >::has_witness_type_
  query_columns< ::eTransactions, id_pgsql, A >::
  has_witness (A::table_name, "\"has_witness\"", 0);

  template <typename A>
  struct pointer_query_columns< ::eTransactions, id_pgsql, A >:
    query_columns< ::eTransactions, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eTransactions, id_pgsql >:
    public access::object_traits< ::eTransactions >
  {
    public:
    struct id_image_type
    {
      int id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      bool id_null;

      // block_id
      //
      int block_id_value;
      bool block_id_null;

      // total_size
      //
      int total_size_value;
      bool total_size_null;

      // inputs_count
      //
      int inputs_count_value;
      bool inputs_count_null;

      // outputs_count
      //
      int outputs_count_value;
      bool outputs_count_null;

      // value_out
      //
      long long value_out_value;
      bool value_out_null;

      // n_lock_time
      //
      int n_lock_time_value;
      bool n_lock_time_null;

      // n_version
      //
      int n_version_value;
      bool n_version_null;

      // hash
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // witness_hash
      //
      details::buffer witness_hash_value;
      std::size_t witness_hash_size;
      bool witness_hash_null;

      // is_coinbase
      //
      bool is_coinbase_value;
      bool is_coinbase_null;

      // has_witness
      //
      bool has_witness_value;
      bool has_witness_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 12UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eTransactions, id_common >:
    public access::object_traits_impl< ::eTransactions, id_pgsql >
  {
  };

  // eTransactions
  //
}

#include "wallet/enterprise/models/support/transactions-odb.ixx"

#include <odb/post.hxx>

#endif // TRANSACTIONS_ODB_HXX
