// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "wallet/enterprise/views/watch_only_addresses-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/view-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/view-result.hxx>

namespace odb
{
  // watch_only_addresses
  //

  const char access::view_traits_impl< ::watch_only_addresses, id_pgsql >::
  query_statement_name[] = "query_watch_only_addresses";

  bool access::view_traits_impl< ::watch_only_addresses, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // wallet_id
    //
    t[0UL] = 0;

    // address
    //
    if (t[1UL])
    {
      i.address_value.capacity (i.address_size);
      grew = true;
    }

    // source
    //
    if (t[2UL])
    {
      i.source_value.capacity (i.source_size);
      grew = true;
    }

    // watch_only_address_id
    //
    t[3UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::watch_only_addresses, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i)
  {
    using namespace pgsql;

    pgsql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // wallet_id
    //
    b[n].type = pgsql::bind::uuid;
    b[n].buffer = i.wallet_id_value;
    b[n].is_null = &i.wallet_id_null;
    n++;

    // address
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.address_value.data ();
    b[n].capacity = i.address_value.capacity ();
    b[n].size = &i.address_size;
    b[n].is_null = &i.address_null;
    n++;

    // source
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.source_value.data ();
    b[n].capacity = i.source_value.capacity ();
    b[n].size = &i.source_size;
    b[n].is_null = &i.source_null;
    n++;

    // watch_only_address_id
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.watch_only_address_id_value;
    b[n].is_null = &i.watch_only_address_id_null;
    n++;
  }

  void access::view_traits_impl< ::watch_only_addresses, id_pgsql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // wallet_id
    //
    {
      ::boost::uuids::uuid& v =
        o.wallet_id;

      pgsql::value_traits<
          ::boost::uuids::uuid,
          pgsql::id_uuid >::set_value (
        v,
        i.wallet_id_value,
        i.wallet_id_null);
    }

    // address
    //
    {
      ::std::string& v =
        o.address;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.address_value,
        i.address_size,
        i.address_null);
    }

    // source
    //
    {
      ::std::string& v =
        o.source;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.source_value,
        i.source_size,
        i.source_null);
    }

    // watch_only_address_id
    //
    {
      unsigned int& v =
        o.watch_only_address_id;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i.watch_only_address_id_value,
        i.watch_only_address_id_null);
    }
  }

  access::view_traits_impl< ::watch_only_addresses, id_pgsql >::query_base_type
  access::view_traits_impl< ::watch_only_addresses, id_pgsql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT wallet_id, address, sourceFROM wallet.watch_only_addressesWHERE watch_only_address_id IS NULL");

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::watch_only_addresses, id_pgsql >::view_type >
  access::view_traits_impl< ::watch_only_addresses, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        qs.clause (),
        false,
        true,
        qs.parameter_types (),
        qs.parameter_count (),
        qs.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) pgsql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

#include <odb/post.hxx>
